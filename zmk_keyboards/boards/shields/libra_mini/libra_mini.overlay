/*
 * Copyright (c) 2024 The ZMK Contributors
 * SPDX-License-Identifier: MIT
 */

#include <physical_layouts.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <dt-bindings/zmk/matrix_transform.h>

/*
 * To use joystick:
 *  - need to rwire D6(COL4)<>D20/AIN6, D10(COL5)<>D21/AIN7
 *  - The VCC pin-hole and VCC pin-header on MCU board is directly connected USB power-line,
 *    so a pattern must be cut and connect them with a jumper.
 *  - Patch required if freeze with ZMK battery.c
 *    https://github.com/zephyrproject-rtos/zephyr/pull/74502
 */
#define USE_JOYSTICK 1

/*
 * Voltage drop-down register for power-saving
 *
 *  nrfx_saadc support gains:
 *   - ADC_GAIN_1_6:
 *   - ADC_GAIN_1_5:
 *   - ADC_GAIN_1_4:
 *   - ADC_GAIN_1_3:
 *   - ADC_GAIN_1_2:
 *   - ADC_GAIN_1:
 *   - ADC_GAIN_2:
 *   - ADC_GAIN_4:
 *
 * 3.3v x R2 / (R1 + R2) x gain = 0.6v
 *
 * R1 = 20K
 * R2 = 5K (10K/axis  parallel)
 *
 * R1=30K and GAIN=1 maybe better
 */
#define JOYSTICK_DROP_DOWN_REGISTER_20K 1

/*
 * TODO
 *   - Joystick push button -> P1.01
 *   - LED Strip -> P1.02 SPI
 *   - PWM Buzzer -> P1.07 PWM
 */

/ {
  chosen {
    zmk,kscan = &kscan0;
  };

  default_transform: keymap_transform_0 {
    compatible = "zmk,matrix-transform";
    columns = <12>;
    rows = <4>;

    map =
      <
       RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5)        RC(0,6) RC(0,7) RC(0,8) RC(0,9) RC(0,10) RC(0,11) RC(3,11)
       RC(1,0)   RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5)        RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10)        RC(1,11)
       RC(2,0)     RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5)   RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10) RC(2,11)  RC(3,10)
       RC(3,0) RC(3,1)             RC(3,3)         RC(3,4)   RC(3,6)         RC(3,7)                  RC(3,8)   RC(3,9)
      >;

    /* TODO Joystick push button */
  };

  kscan0: kscan {
    compatible = "zmk,kscan-gpio-matrix";
    wakeup-source;
    diode-direction = "row2col";
    row-gpios
      = <&pro_micro 7 (GPIO_ACTIVE_HIGH)>
      , <&pro_micro 8 (GPIO_ACTIVE_HIGH)>
      , <&pro_micro 9 (GPIO_ACTIVE_HIGH)>
      , <&pro_micro 16 (GPIO_ACTIVE_HIGH)>
      ;
    col-gpios
      = <&pro_micro 14 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
      , <&pro_micro 15 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
      , <&pro_micro 18 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
      , <&pro_micro 19 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>

#if USE_JOYSTICK
      , <&pro_micro 6 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
      , <&pro_micro 10 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
#else
      , <&pro_micro 20 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
      , <&pro_micro 21 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
#endif
      , <&pro_micro 5 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
      , <&pro_micro 4 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
      , <&pro_micro 3 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
      , <&pro_micro 2 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
      , <&pro_micro 0 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
      , <&pro_micro 1 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
      ;
  };

  soft_off_wakers: soft_off_wakers {
    compatible = "zmk,soft-off-wakeup-sources";
    wakeup-sources = <&kscan0>;
  };

  layout0: layout0 {
    compatible = "zmk,physical-layout";
    display-name = "Alice 45+";
    kscan = <&kscan0>;
    transform = <&default_transform>;
    keys  //                   w   h    x    y     rot    rx    ry
      // row 0
      = <&key_physical_attrs 100 100   25    0       0     0     0>
      , <&key_physical_attrs 100 100  125    0       0     0     0>
      , <&key_physical_attrs 100 100  237    0     800   287    50>
      , <&key_physical_attrs 100 100  337    0     800   287    50>
      , <&key_physical_attrs 100 100  437    0     800   287    50>
      , <&key_physical_attrs 100 100  537    0     800   287    50>
      , <&key_physical_attrs 100 100  732   50  (-800)   775   100>
      , <&key_physical_attrs 100 100  832   50  (-800)   775   100>
      , <&key_physical_attrs 100 100  932   50  (-800)   775   100>
      , <&key_physical_attrs 100 100 1032   50  (-800)   775   100>
      , <&key_physical_attrs 100 100 1140    0       0     0     0>
      , <&key_physical_attrs 100 100 1240    0       0     0     0>
      , <&key_physical_attrs 100 100 1340    0       0     0     0>
      // row 1
      , <&key_physical_attrs 125 100   12  100       0     0     0>
      , <&key_physical_attrs 100 100  137  100       0     0     0>
      , <&key_physical_attrs 100 100  250  100     800   287   150>
      , <&key_physical_attrs 100 100  350  100     800   287   150>
      , <&key_physical_attrs 100 100  450  100     800   287   150>
      , <&key_physical_attrs 100 100  550  100     800   287   150>
      , <&key_physical_attrs 100 100  775  150  (-800)   775   200>
      , <&key_physical_attrs 100 100  875  150  (-800)   775   200>
      , <&key_physical_attrs 100 100  975  150  (-800)   775   200>
      , <&key_physical_attrs 100 100 1075  150  (-800)   775   200>
      , <&key_physical_attrs 100 100 1178  100       0     0     0>
      , <&key_physical_attrs 175 100 1278  100       0     0     0>
      // row 2
      , <&key_physical_attrs 175 100    0  200       0     0     0>
      , <&key_physical_attrs 100 100  175  200       0     0     0>
      , <&key_physical_attrs 100 100  287  200     800   287   250>
      , <&key_physical_attrs 100 100  387  200     800   287   250>
      , <&key_physical_attrs 100 100  487  200     800   287   250>
      , <&key_physical_attrs 100 100  587  200     800   287   250>
      , <&key_physical_attrs 100 100  735  250  (-800)   775   300>
      , <&key_physical_attrs 100 100  835  250  (-800)   775   300>
      , <&key_physical_attrs 100 100  935  250  (-800)   775   300>
      , <&key_physical_attrs 100 100 1035  250  (-800)   775   300>
      , <&key_physical_attrs 100 100 1140  200       0     0     0>
      , <&key_physical_attrs 100 100 1240  200       0     0     0>
      , <&key_physical_attrs 125 100 1340  200       0     0     0>
      // row 3
      , <&key_physical_attrs 125 100   12  300       0     0     0>
      , <&key_physical_attrs 125 100  137  300       0     0     0>
      , <&key_physical_attrs 125 100  347  300     800   287   350>
      , <&key_physical_attrs 200 100  472  300     800   287   350>
      , <&key_physical_attrs 225 100  750  350  (-800)   775   400>
      , <&key_physical_attrs 100 100  975  350  (-800)   775   400>
      , <&key_physical_attrs 100 100 1250  300       0     0     0>
      , <&key_physical_attrs 100 100 1350  300       0     0     0>
      ;
  };


#if USE_JOYSTICK

 /*
  * in_deadzon, in_min and in_max can be caribrated and saveed with shell/analog_axis.c
  *
  * uart:~$ analog_axis show
  * dev.0 (analog_axis) settings:
  * ch.0 in_min: 347, in_max: 2133, in_deadzone: 100, out_min: -127, out_max: 127, invert_output: true
  * ch.1 in_min: 347, in_max: 1951, in_deadzone: 100, out_min: -127, out_max: 127, invert_output: true
  *
  * TODO joystick directions are inverted.
  *  - need to check if it's possible to swap VCC and GND wiring
  *
  */
  joystick: analog_axis {
    compatible = "analog-axis";
    poll-period-ms = <15>;
    velocity-integral;
    power-domain = <&{/EXT_POWER}>;
    axis-x {
      io-channels = <&adc 3>;
#if JOYSTICK_DROP_DOWN_REGISTER_20K
      in-deadzone = <150>;
      in-min = <400>;
      in-max = <1900>;
#else
      in-deadzone = <100>;
      in-min = <600>;
      in-max = <3000>;
#endif
      invert-output;
      out-min = <(-127)>;
      out-max = <127>;
      zephyr,axis = <INPUT_REL_X>;
    };
    axis-y {
      io-channels = <&adc 4>;
#if JOYSTICK_DROP_DOWN_REGISTER_20K
      in-deadzone = <150>;
      in-min = <400>;
      in-max = <1900>;
#else
      in-deadzone = <100>;
      in-min = <600>;
      in-max = <3000>;
#endif
      invert-output;
      out-min = <(-127)>;
      out-max = <127>;
      zephyr,axis = <INPUT_REL_Y>;
    };
  };

  /*
   * mouse
   */
  joystick_pointing_listener: joystick_pointing_listener {
    compatible = "zmk,input-listener";
    device = <&joystick>;
  };

#endif

};

#if USE_JOYSTICK
/*
 * ADC ch.3-4 for joystick
 * nice!nano v2 use ADC ch.0 for battery
 * nice!nano use ADC ch.2 for battery
 */
&adc {
	#address-cells = <1>;
	#size-cells = <0>;
	channel@3 {
		reg = <3>;
#if JOYSTICK_DROP_DOWN_REGISTER_20K
		zephyr,gain = "ADC_GAIN_1_2";
#else
		zephyr,gain = "ADC_GAIN_1_6";
#endif
		zephyr,reference = "ADC_REF_INTERNAL";
		zephyr,acquisition-time = <ADC_ACQ_TIME_DEFAULT>;
    zephyr,input-positive = <NRF_SAADC_AIN5>;
		zephyr,resolution = <12>;
		zephyr,oversampling = <0>;
	};
	channel@4 {
		reg = <4>;
#if JOYSTICK_DROP_DOWN_REGISTER_20K
		zephyr,gain = "ADC_GAIN_1_2";
#else
		zephyr,gain = "ADC_GAIN_1_6";
#endif
		zephyr,reference = "ADC_REF_INTERNAL";
		zephyr,acquisition-time = <ADC_ACQ_TIME_DEFAULT>;
		zephyr,input-positive = <NRF_SAADC_AIN7>;
		zephyr,resolution = <12>;
		zephyr,oversampling = <0>;
	};
};
#endif


&pro_micro_i2c {
  status = "disabled";
};

&pro_micro_spi {
  status = "disabled";
};

&pro_micro_serial {
  status = "disabled";
};
