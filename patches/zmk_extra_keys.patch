diff --git a/app/include/zmk/hid.h b/app/include/zmk/hid.h
index 4c963be..72897c3 100644
--- a/app/include/zmk/hid.h
+++ b/app/include/zmk/hid.h
@@ -16,6 +16,10 @@
 #include <zmk/pointing.h>
 #endif // IS_ENABLED(CONFIG_ZMK_POINTING)
 
+#if IS_ENABLED(CONFIG_ZMK_HID_EXTRA_KEYS)
+#include <zmk/hid_extra_keys.h>
+#endif // IS_ENABLED(CONFIG_ZMK_HID_EXTRA_KEYS)
+
 #include <dt-bindings/zmk/hid_usage.h>
 #include <dt-bindings/zmk/hid_usage_pages.h>
 
@@ -116,10 +120,14 @@ static const uint8_t zmk_hid_report_desc[] = {
     HID_REPORT_COUNT(0x08),
     HID_INPUT(ZMK_HID_MAIN_VAL_DATA | ZMK_HID_MAIN_VAL_VAR | ZMK_HID_MAIN_VAL_ABS),
 
+#if IS_ENABLED(CONFIG_ZMK_HID_EXTRA_KEYS)
+    HID_EXTRA_KEYS_DESC,
+#else
     HID_USAGE_PAGE(HID_USAGE_KEY),
     HID_REPORT_SIZE(0x08),
     HID_REPORT_COUNT(0x01),
     HID_INPUT(ZMK_HID_MAIN_VAL_CONST | ZMK_HID_MAIN_VAL_VAR | ZMK_HID_MAIN_VAL_ABS),
+#endif // IS_ENABLED(CONFIG_ZMK_HID_EXTRA_KEYS)
 
 #if IS_ENABLED(CONFIG_ZMK_HID_INDICATORS)
 
@@ -276,7 +284,7 @@ typedef struct zmk_hid_boot_report zmk_hid_boot_report_t;
 
 struct zmk_hid_keyboard_report_body {
     zmk_mod_flags_t modifiers;
-    uint8_t _reserved;
+    uint8_t extra_keys;
 #if IS_ENABLED(CONFIG_ZMK_HID_REPORT_TYPE_NKRO)
     uint8_t keys[DIV_ROUND_UP(ZMK_HID_KEYBOARD_NKRO_MAX_USAGE + 1, 8)];
 #elif IS_ENABLED(CONFIG_ZMK_HID_REPORT_TYPE_HKRO)
diff --git a/app/src/endpoints.c b/app/src/endpoints.c
index ae0e5e7..dbf215c 100644
--- a/app/src/endpoints.c
+++ b/app/src/endpoints.c
@@ -195,6 +195,11 @@ int zmk_endpoints_send_report(uint16_t usage_page) {
 
     case HID_USAGE_CONSUMER:
         return send_consumer_report();
+
+#if IS_ENABLED(CONFIG_ZMK_HID_EXTRA_KEYS)
+    case HID_ALT_USAGE_EXTRA_KEY:
+        return send_keyboard_report();
+#endif
     }
 
     LOG_ERR("Unsupported usage page %d", usage_page);
diff --git a/app/src/hid.c b/app/src/hid.c
index c050f06..40d13b1 100644
--- a/app/src/hid.c
+++ b/app/src/hid.c
@@ -13,7 +13,8 @@ LOG_MODULE_DECLARE(zmk, CONFIG_ZMK_LOG_LEVEL);
 
 static struct zmk_hid_keyboard_report keyboard_report = {
 
-    .report_id = ZMK_HID_REPORT_ID_KEYBOARD, .body = {.modifiers = 0, ._reserved = 0, .keys = {0}}};
+    .report_id = ZMK_HID_REPORT_ID_KEYBOARD,
+    .body = {.modifiers = 0, .extra_keys = 0, .keys = {0}}};
 
 static struct zmk_hid_consumer_report consumer_report = {.report_id = ZMK_HID_REPORT_ID_CONSUMER,
                                                          .body = {.keys = {0}}};
@@ -347,6 +348,15 @@ int zmk_hid_press(uint32_t usage) {
         return zmk_hid_keyboard_press(ZMK_HID_USAGE_ID(usage));
     case HID_USAGE_CONSUMER:
         return zmk_hid_consumer_press(ZMK_HID_USAGE_ID(usage));
+#if IS_ENABLED(CONFIG_ZMK_HID_EXTRA_KEYS)
+    case HID_ALT_USAGE_EXTRA_KEY:
+        uint16_t idx = ZMK_HID_USAGE_ID(usage);
+        if (idx < 8) {
+            keyboard_report.body.extra_keys |= 1 << idx;
+            return 0;
+        }
+        break;
+#endif
     }
     return -EINVAL;
 }
@@ -357,6 +367,15 @@ int zmk_hid_release(uint32_t usage) {
         return zmk_hid_keyboard_release(ZMK_HID_USAGE_ID(usage));
     case HID_USAGE_CONSUMER:
         return zmk_hid_consumer_release(ZMK_HID_USAGE_ID(usage));
+#if IS_ENABLED(CONFIG_ZMK_HID_EXTRA_KEYS)
+    case HID_ALT_USAGE_EXTRA_KEY:
+        uint16_t idx = ZMK_HID_USAGE_ID(usage);
+        if (idx < 8) {
+            keyboard_report.body.extra_keys &= ~(1 << idx);
+            return 0;
+        }
+        break;
+#endif
     }
     return -EINVAL;
 }
@@ -367,6 +386,13 @@ bool zmk_hid_is_pressed(uint32_t usage) {
         return zmk_hid_keyboard_is_pressed(ZMK_HID_USAGE_ID(usage));
     case HID_USAGE_CONSUMER:
         return zmk_hid_consumer_is_pressed(ZMK_HID_USAGE_ID(usage));
+#if IS_ENABLED(CONFIG_ZMK_HID_EXTRA_KEYS)
+    case HID_ALT_USAGE_EXTRA_KEY:
+        uint16_t idx = ZMK_HID_USAGE_ID(usage);
+        if (idx < 8)
+            return (keyboard_report.body.extra_keys & (1 << idx)) != 0;
+        break;
+#endif
     }
     return false;
 }
