diff --git a/app/src/split/bluetooth/peripheral.c b/app/src/split/bluetooth/peripheral.c
index 5a12e0f..bf98fa6 100644
--- a/app/src/split/bluetooth/peripheral.c
+++ b/app/src/split/bluetooth/peripheral.c
@@ -35,6 +35,9 @@ LOG_MODULE_DECLARE(zmk, CONFIG_ZMK_LOG_LEVEL);
 #include <zmk/ble.h>
 #include <zmk/split/bluetooth/uuid.h>
 
+#define ADVERTISING_DELAY K_MSEC(10)
+#define ADVERTISING_RETRY_DELAY K_MSEC(500)
+
 static const struct bt_data zmk_ble_ad[] = {
     BT_DATA_BYTES(BT_DATA_FLAGS, (BT_LE_AD_GENERAL | BT_LE_AD_NO_BREDR)),
     BT_DATA_BYTES(BT_DATA_UUID16_SOME, 0x0f, 0x18 /* Battery Service */
@@ -70,16 +73,18 @@ static int start_advertising(bool low_duty) {
 };
 
 static bool low_duty_advertising = false;
+static void advertising_cb(struct k_work *work);
+
+K_WORK_DELAYABLE_DEFINE(advertising_work, advertising_cb);
 
 static void advertising_cb(struct k_work *work) {
     const int err = start_advertising(low_duty_advertising);
     if (err < 0) {
         LOG_ERR("Failed to start advertising (%d)", err);
+        k_work_reschedule(&advertising_work, ADVERTISING_RETRY_DELAY);
     }
 }
 
-K_WORK_DEFINE(advertising_work, advertising_cb);
-
 static void connected(struct bt_conn *conn, uint8_t err) {
     is_connected = (err == 0);
 
@@ -88,7 +93,7 @@ static void connected(struct bt_conn *conn, uint8_t err) {
 
     if (err == BT_HCI_ERR_ADV_TIMEOUT) {
         low_duty_advertising = true;
-        k_work_submit(&advertising_work);
+        k_work_reschedule(&advertising_work, ADVERTISING_DELAY);
     }
 }
 
@@ -105,7 +110,7 @@ static void disconnected(struct bt_conn *conn, uint8_t reason) {
         (struct zmk_split_peripheral_status_changed){.connected = is_connected});
 
     low_duty_advertising = false;
-    k_work_submit(&advertising_work);
+    k_work_reschedule(&advertising_work, ADVERTISING_DELAY);
 }
 
 static void security_changed(struct bt_conn *conn, bt_security_t level, enum bt_security_err err) {
@@ -156,7 +161,7 @@ static int zmk_peripheral_ble_complete_startup(void) {
     bt_conn_auth_info_cb_register(&zmk_peripheral_ble_auth_info_cb);
 
     low_duty_advertising = false;
-    k_work_submit(&advertising_work);
+    k_work_reschedule(&advertising_work, ADVERTISING_DELAY);
 #endif
 
     return 0;
