diff --git a/app/module/drivers/sensor/ec11/ec11_trigger.c b/app/module/drivers/sensor/ec11/ec11_trigger.c
index f9384a6..3ed54c7 100644
--- a/app/module/drivers/sensor/ec11/ec11_trigger.c
+++ b/app/module/drivers/sensor/ec11/ec11_trigger.c
@@ -136,7 +136,7 @@ int ec11_init_interrupt(const struct device *dev) {
     k_sem_init(&drv_data->gpio_sem, 0, UINT_MAX);
 
     k_thread_create(&drv_data->thread, drv_data->thread_stack, CONFIG_EC11_THREAD_STACK_SIZE,
-                    (k_thread_entry_t)ec11_thread, dev, 0, NULL,
+                    (k_thread_entry_t)ec11_thread, (void *)dev, 0, NULL,
                     K_PRIO_COOP(CONFIG_EC11_THREAD_PRIORITY), 0, K_NO_WAIT);
 #elif defined(CONFIG_EC11_TRIGGER_GLOBAL_THREAD)
     k_work_init(&drv_data->work, ec11_work_cb);
diff --git a/app/src/pointing/input_processor_temp_layer.c b/app/src/pointing/input_processor_temp_layer.c
index 999e93a..b8712f5 100644
--- a/app/src/pointing/input_processor_temp_layer.c
+++ b/app/src/pointing/input_processor_temp_layer.c
@@ -123,7 +123,7 @@ static void layer_disable_callback(struct k_work *work) {
 
     struct layer_state_action action = {.layer = layer_index, .activate = false};
 
-    int ret = k_msgq_put(&temp_layer_action_msgq, &action, K_MSEC(10));
+    k_msgq_put(&temp_layer_action_msgq, &action, K_MSEC(10));
     k_work_submit(&layer_action_work);
 }
 
@@ -187,7 +187,7 @@ static int handle_keycode_state_changed(const struct device *dev, const zmk_even
         return ret;
     }
 
-    LOG_DBG("Setting last_tapped_timestamp to: %d", ev->timestamp);
+    LOG_DBG("Setting last_tapped_timestamp to: %lld", ev->timestamp);
     data->state.last_tapped_timestamp = ev->timestamp;
 
     ret = k_mutex_unlock(&data->lock);
@@ -251,7 +251,7 @@ static int temp_layer_handle_event(const struct device *dev, struct input_event
         !should_quick_tap(cfg, data->state.last_tapped_timestamp, k_uptime_get())) {
         struct layer_state_action action = {.layer = param1, .activate = true};
 
-        int ret = k_msgq_put(&temp_layer_action_msgq, &action, K_MSEC(10));
+        k_msgq_put(&temp_layer_action_msgq, &action, K_MSEC(10));
         k_work_submit(&layer_action_work);
     }
 
