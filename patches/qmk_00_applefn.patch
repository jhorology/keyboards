diff --git a/builddefs/common_features.mk b/builddefs/common_features.mk
index 498614dd..0df5b383 100644
--- a/builddefs/common_features.mk
+++ b/builddefs/common_features.mk
@@ -847,6 +847,13 @@ ifeq ($(strip $(JOYSTICK_ENABLE)), yes)
     endif
 endif
 
+ifeq ($(strip $(APPLE_FN_ENABLE)), yes)
+    ifeq ($(strip $(EXTRAKEY_ENABLE)), no)
+        $(error APPLE_FN_ENABLE requires EXTRAKEY_ENABLE)
+    endif
+    OPT_DEFS += -DAPPLE_FN_ENABLE
+endif
+
 USBPD_ENABLE ?= no
 VALID_USBPD_DRIVER_TYPES = custom vendor
 USBPD_DRIVER ?= vendor
diff --git a/drivers/bluetooth/bluetooth.c b/drivers/bluetooth/bluetooth.c
index d5382401..96e854ad 100644
--- a/drivers/bluetooth/bluetooth.c
+++ b/drivers/bluetooth/bluetooth.c
@@ -60,3 +60,7 @@ void bluetooth_send_consumer(uint16_t usage) {
     rn42_send_consumer(usage);
 #endif
 }
+
+void bluetooth_send_apple(bool pressed, uint8_t usageIndex);
+// TODO not implemented yet
+}
diff --git a/drivers/bluetooth/bluetooth.h b/drivers/bluetooth/bluetooth.h
index 2e4d0df5..fa95a758 100644
--- a/drivers/bluetooth/bluetooth.h
+++ b/drivers/bluetooth/bluetooth.h
@@ -50,3 +50,5 @@ void bluetooth_send_mouse(report_mouse_t *report);
  * \param usage The consumer usage to send.
  */
 void bluetooth_send_consumer(uint16_t usage);
+
+void bluetooth_send_apple(bool pressed, uint8_t usageIndex);
diff --git a/tmk_core/protocol/host.c b/tmk_core/protocol/host.c
index 732fbdc3..7b09b6a8 100644
--- a/tmk_core/protocol/host.c
+++ b/tmk_core/protocol/host.c
@@ -43,6 +43,7 @@ extern keymap_config_t keymap_config;
 static host_driver_t *driver;
 static uint16_t       last_system_usage   = 0;
 static uint16_t       last_consumer_usage = 0;
+static uint16_t       last_apple_usages   = 0;
 
 void host_set_driver(host_driver_t *d) {
     driver = d;
@@ -162,6 +163,28 @@ void host_consumer_send(uint16_t usage) {
     (*driver->send_extra)(&report);
 }
 
+void host_apple_send(bool pressed, uint8_t usageIndex) {
+    uint16_t usage_mask = 1 << usageIndex;
+    uint16_t usages   = pressed ? (last_apple_usages | usage_mask) : (last_apple_usages & ~usage_mask);
+    if (usages == last_apple_usages) return;
+    last_apple_usages = usages;
+
+#ifdef BLUETOOTH_ENABLE
+    if (where_to_send() == OUTPUT_BLUETOOTH) {
+        bluetooth_send_apple_fn(pressed, usageIndex);
+        return;
+    }
+#endif
+
+    if (!driver) return;
+
+    report_extra_t report = {
+        .report_id = REPORT_ID_APPLE,
+        .usage = usages
+    };
+    (*driver->send_extra)(&report);
+}
+
 #ifdef JOYSTICK_ENABLE
 void host_joystick_send(joystick_t *joystick) {
     if (!driver) return;
@@ -256,3 +279,7 @@ uint16_t host_last_system_usage(void) {
 uint16_t host_last_consumer_usage(void) {
     return last_consumer_usage;
 }
+
+bool host_apple_is_pressed(uint16_t usage_mask) {
+    return (last_apple_usages & usage_mask) != 0;
+}
diff --git a/tmk_core/protocol/host.h b/tmk_core/protocol/host.h
index 959753ae..2e222f55 100644
--- a/tmk_core/protocol/host.h
+++ b/tmk_core/protocol/host.h
@@ -42,10 +42,12 @@ void    host_nkro_send(report_nkro_t *report);
 void    host_mouse_send(report_mouse_t *report);
 void    host_system_send(uint16_t usage);
 void    host_consumer_send(uint16_t usage);
+void    host_apple_send(bool pressed, uint8_t usageIndex);
 void    host_programmable_button_send(uint32_t data);
 
 uint16_t host_last_system_usage(void);
 uint16_t host_last_consumer_usage(void);
+bool     host_apple_is_pressed(uint16_t usage_mask);
 
 #ifdef __cplusplus
 }
diff --git a/tmk_core/protocol/report.h b/tmk_core/protocol/report.h
index 0e4f6e9d..e5adaea5 100644
--- a/tmk_core/protocol/report.h
+++ b/tmk_core/protocol/report.h
@@ -35,6 +35,7 @@ enum hid_report_ids {
     REPORT_ID_MOUSE,
     REPORT_ID_SYSTEM,
     REPORT_ID_CONSUMER,
+    REPORT_ID_APPLE,
     REPORT_ID_PROGRAMMABLE_BUTTON,
     REPORT_ID_NKRO,
     REPORT_ID_JOYSTICK,
diff --git a/tmk_core/protocol/usb_descriptor.c b/tmk_core/protocol/usb_descriptor.c
index 703589b0..13a8fa34 100644
--- a/tmk_core/protocol/usb_descriptor.c
+++ b/tmk_core/protocol/usb_descriptor.c
@@ -321,6 +321,52 @@ const USB_Descriptor_HIDReport_Datatype_t PROGMEM SharedReport[] = {
         HID_RI_REPORT_SIZE(8, 16),
         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
     HID_RI_END_COLLECTION(0),
+
+#    ifdef APPLE_FN_ENABLE
+    // see
+    // https://github.com/apple-oss-distributions/IOHIDFamily/blob/d077740b771442ed13d8953218018266a90eba73/IOHIDFamily/IOHIDEventDriver.cpp#L2325
+    // https://github.com/apple-oss-distributions/IOHIDFamily/blob/d077740b771442ed13d8953218018266a90eba73/IOHIDFamily/IOHIDEventDriver.cpp#L2338
+    HID_RI_USAGE_PAGE(16, 0xff00),      // Usage Page kHIDPage_AppleVendor)
+    HID_RI_USAGE(8, 0x01),              // Usage 1
+    HID_RI_COLLECTION(8, 0x01),         // Application
+        HID_RI_REPORT_ID(8, REPORT_ID_APPLE),
+        // AppleVebdorTopCasePage
+        HID_RI_USAGE_PAGE(8, 0xFF),     // AppleVendor Top Case
+        HID_RI_LOGICAL_MINIMUM(8, 0x0),
+        HID_RI_LOGICAL_MAXIMUM(8, 0x1),
+        HID_RI_USAGE(8, 0x03),          //  0 kHIDUsage_AV_TopCase_KeyboardFn
+        // HID_RI_USAGE(8, 0x04),       //  _ kHIDUsage_AV_TopCase_BrightnessUp
+        // HID_RI_USAGE(8, 0x05),       //  _ kHIDUsage_AV_TopCase_BrightnessDown
+        HID_RI_USAGE(8, 0x08),          //  1 kHIDUsage_AV_TopCase_IlluminationUp
+        HID_RI_USAGE(8, 0x09),          //  2 kHIDUsage_AV_TopCase_IlluminationDown
+        HID_RI_REPORT_COUNT(8, 0x03),
+        HID_RI_REPORT_SIZE(8, 0x01),
+        HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
+        // AppleVebdorKeyboardPage
+        HID_RI_USAGE_PAGE(16, 0xFF01),  // kHIDPage_AppleVendorKeyboard
+        HID_RI_LOGICAL_MINIMUM(8, 0x0),
+        HID_RI_LOGICAL_MAXIMUM(8, 0x1),
+        HID_RI_USAGE(8, 0x01),          //  3 kHIDUsage_AppleVendorKeyboard_Spotlight
+        HID_RI_USAGE(8, 0x02),          //  4 kHIDUsage_AppleVendorKeyboard_Dashboard
+        HID_RI_USAGE(8, 0x03),          //  5 kHIDUsage_AppleVendorKeyboard_Function
+        HID_RI_USAGE(8, 0x04),          //  6 kHIDUsage_AppleVendorKeyboard_Launchpad
+        HID_RI_USAGE(8, 0x0A),          //  7 kHIDUsage_AppleVendorKeyboard_Reserved
+        HID_RI_USAGE(8, 0x0B),          //  8 kHIDUsage_AppleVendorKeyboard_CapsLockDelayEnable
+        HID_RI_USAGE(8, 0x0C),          //  9 kHIDUsage_AppleVendorKeyboard_PowerState
+        HID_RI_USAGE(8, 0x10),          // 10 kHIDUsage_AppleVendorKeyboard_Expose_All
+        HID_RI_USAGE(8, 0x11),          // 11 kHIDUsage_AppleVendorKeyboard_Expose_Desktop
+        HID_RI_USAGE(8, 0x20),          // 12 kHIDUsage_AppleVendorKeyboard_Brightness_Up
+        HID_RI_USAGE(8, 0x21),          // 13 kHIDUsage_AppleVendorKeyboard_Brightness_Down
+        HID_RI_USAGE(8, 0x30),          // 14  kHIDUsage_AppleVendorKeyboard_Language
+        HID_RI_REPORT_COUNT(8, 12),
+        HID_RI_REPORT_SIZE(8, 0x01),
+        HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
+        // Reserved (1bits)
+        HID_RI_REPORT_COUNT(8, 0x01),
+        HID_RI_REPORT_SIZE(8, 0x01),
+        HID_RI_INPUT(8, HID_IOF_CONSTANT),
+    HID_RI_END_COLLECTION(0),
+#    endif
 #endif
 
 #ifdef PROGRAMMABLE_BUTTON_ENABLE
diff --git a/tmk_core/protocol/vusb/vusb.c b/tmk_core/protocol/vusb/vusb.c
index fa14820e..e22af2c4 100644
--- a/tmk_core/protocol/vusb/vusb.c
+++ b/tmk_core/protocol/vusb/vusb.c
@@ -570,6 +570,52 @@ const PROGMEM uchar shared_hid_report[] = {
     0x75, 0x10,               //   Report Size (16)
     0x81, 0x00,               //   Input (Data, Array, Absolute)
     0xC0,                     // End Collection
+
+#    ifdef APPLE_FN_ENABLE
+      // see
+      // https://github.com/apple-oss-distributions/IOHIDFamily/blob/d077740b771442ed13d8953218018266a90eba73/IOHIDFamily/IOHIDEventDriver.cpp#L2325
+      // https://github.com/apple-oss-distributions/IOHIDFamily/blob/d077740b771442ed13d8953218018266a90eba73/IOHIDFamily/IOHIDEventDriver.cpp#L2338
+      0x06, 0x00, 0xFF,       // Usage Page (kHIDPage_AppleVendor)
+      0x09, 0x01,             // Usage 1
+      0xA1, 0x01,             // Collection (Application)
+      0x85, REPORT_ID_APPLE,  //   Report ID
+      // Apple Vendor Top Case Page
+      0x05, 0xFF,             //   Usage Page (AppleVendor Top Case)
+      0x15, 0x00,             //   Logical Minimum (0)
+      0x25, 0x01,             //   Logical Maximum (1)
+      0x09, 0x03,             //     0 kHIDUsage_AV_TopCase_KeyboardFn
+      // 0x09, 0x04,          //    __ kHIDUsage_AV_TopCase_BrightnessUp
+      // 0x09, 0x05,          //    __ kHIDUsage_AV_TopCase_BrightnessDown
+      0x09, 0x08,             //     1 kHIDUsage_AV_TopCase_IlluminationUp
+      0x09, 0x09,             //     2  kHIDUsage_AV_TopCase_IlluminationDown
+      0x95, 0x03,             //   Report Count (3)
+      0x75, 0x01,             //   Report Size (1)
+      0x81, 0x02,             //   Input (Data, Variable, Absolute)
+      // Apple Vendor Keyboard Page
+      0x06, 0x01, 0xFF,       //   Usage Page (kHIDPage_AppleVendorKeyboard)
+      0x15, 0x00,             //   Logical Minimum (0)
+      0x25, 0x01,             //   Logical Maximum (1)
+      0x09, 0x01,             //    3 kHIDUsage_AppleVendorKeyboard_Spotlight
+      0x09, 0x02,             //    4 kHIDUsage_AppleVendorKeyboard_Dashboard
+      0x09, 0x03,             //    5 kHIDUsage_AppleVendorKeyboard_Function
+      0x09, 0x04,             //    6 kHIDUsage_AppleVendorKeyboard_Launchpad
+      0x09, 0x0A,             //    7 kHIDUsage_AppleVendorKeyboard_Reserved
+      0x09, 0x0B,             //    8 kHIDUsage_AppleVendorKeyboard_CapsLockDelayEnable
+      0x09, 0x0C,             //    9 kHIDUsage_AppleVendorKeyboard_PowerState
+      0x09, 0x10,             //   10 kHIDUsage_AppleVendorKeyboard_Expose_All
+      0x09, 0x11,             //   11 kHIDUsage_AppleVendorKeyboard_Expose_Desktop
+      0x09, 0x20,             //   12 kHIDUsage_AppleVendorKeyboard_Brightness_Up
+      0x09, 0x21,             //   13 kHIDUsage_AppleVendorKeyboard_Brightness_Down
+      0x09, 0x30,             //   14 kHIDUsage_AppleVendorKeyboard_Language
+      0x95, 0x0C,             //   Report Count (12)
+      0x75, 0x01,             //   Report Size (1)
+      0x81, 0x02,             //   Input (Data, Variable, Absolute)
+      // Reserved (1bits)
+      0x95, 0x01,             //   Report Count (1)
+      0x75, 0x01,             //   Report Size (1)
+      0x81, 0x03,             //   Input (Constant)
+      0xC0,                   // End Collection
+#    endif
 #endif
 
 #ifdef JOYSTICK_ENABLE
