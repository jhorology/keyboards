diff --git a/app/include/zmk/endpoints.h b/app/include/zmk/endpoints.h
index f2aff2b..6415ad0 100644
--- a/app/include/zmk/endpoints.h
+++ b/app/include/zmk/endpoints.h
@@ -74,4 +74,8 @@ int zmk_endpoints_send_report(uint16_t usage_page);
 int zmk_endpoints_send_mouse_report();
 #endif // IS_ENABLE(CONFIG_ZMK_MOUSE)
 
+#if IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLLER)
+int zmk_endpoints_send_radial_controller_report();
+#endif // IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLLER)
+
 void zmk_endpoints_clear_current(void);
diff --git a/app/include/zmk/hid.h b/app/include/zmk/hid.h
index 766fb9c..edbe09f 100644
--- a/app/include/zmk/hid.h
+++ b/app/include/zmk/hid.h
@@ -76,6 +76,7 @@
 #define ZMK_HID_REPORT_ID_LEDS 0x01
 #define ZMK_HID_REPORT_ID_CONSUMER 0x02
 #define ZMK_HID_REPORT_ID_MOUSE 0x03
+#define ZMK_HID_REPORT_ID_RADIAL_CONTROLLER 0x04
 
 static const uint8_t zmk_hid_report_desc[] = {
     HID_USAGE_PAGE(HID_USAGE_GEN_DESKTOP),
@@ -193,6 +194,42 @@ static const uint8_t zmk_hid_report_desc[] = {
     HID_END_COLLECTION,
     HID_END_COLLECTION,
 #endif // IS_ENABLED(CONFIG_ZMK_MOUSE)
+
+#if IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLLER)
+    HID_USAGE_PAGE(HID_USAGE_GEN_DESKTOP),
+    HID_USAGE(HID_USAGE_GD_SYSTEM_MULTI_AXIS_CONTROLLER),
+    HID_COLLECTION(HID_COLLECTION_APPLICATION),
+    HID_REPORT_ID(ZMK_HID_REPORT_ID_RADIAL_CONTROLLER),
+    HID_USAGE_PAGE(HID_USAGE_DIGITIZERS),
+    HID_USAGE(HID_USAGE_DIGITIZERS_PUCK),
+    HID_COLLECTION(HID_COLLECTION_PHYSICAL), // Physical
+    HID_USAGE_PAGE(0x09),                    // Buttons
+    HID_USAGE(0x01),                         // Button 1
+    HID_LOGICAL_MIN8(0x00),
+    HID_LOGICAL_MAX8(0x01),
+    HID_REPORT_COUNT(1),
+    HID_REPORT_SIZE(1),
+    HID_INPUT(ZMK_HID_MAIN_VAL_DATA | ZMK_HID_MAIN_VAL_VAR | ZMK_HID_MAIN_VAL_ABS),
+    HID_USAGE_PAGE(HID_USAGE_GEN_DESKTOP),
+    HID_USAGE(HID_USAGE_GD_DIAL),
+    0x55,
+    0x0F, // Unit Exponent (-1)
+    0x65,
+    0x14, // Unit (System: English Rotation, Length: Centimeter)
+    0x36,
+    0xF0,
+    0xF1, // Physical Minimum (-3600)
+    0x46,
+    0x10,
+    0x0E,                          // Physical Maximum (3600)
+    HID_LOGICAL_MIN16(0xF0, 0xF1), // -3600
+    HID_LOGICAL_MAX16(0x10, 0x0E), // 3600
+    HID_REPORT_COUNT(1),
+    HID_REPORT_SIZE(15),
+    HID_INPUT(ZMK_HID_MAIN_VAL_DATA | ZMK_HID_MAIN_VAL_VAR | ZMK_HID_MAIN_VAL_REL),
+    HID_END_COLLECTION,
+    HID_END_COLLECTION,
+#endif // IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLLER)
 };
 
 #if IS_ENABLED(CONFIG_ZMK_USB_BOOT)
@@ -270,6 +307,18 @@ struct zmk_hid_mouse_report {
 
 #endif // IS_ENABLED(CONFIG_ZMK_MOUSE)
 
+#if IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLLER)
+struct zmk_hid_radial_controller_report_body {
+    bool button : 1;
+    int16_t dial : 15;
+} __packed;
+
+struct zmk_hid_radial_controller_report {
+    uint8_t report_id;
+    struct zmk_hid_radial_controller_report_body body;
+} __packed;
+#endif // IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLLER)
+
 zmk_mod_flags_t zmk_hid_get_explicit_mods(void);
 int zmk_hid_register_mod(zmk_mod_t modifier);
 int zmk_hid_unregister_mod(zmk_mod_t modifier);
@@ -304,6 +353,14 @@ int zmk_hid_mouse_buttons_release(zmk_mouse_button_flags_t buttons);
 void zmk_hid_mouse_clear(void);
 #endif // IS_ENABLED(CONFIG_ZMK_MOUSE)
 
+#if IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLLER)
+int zmk_hid_radial_controller_button_press();
+int zmk_hid_radial_controller_button_release();
+int zmk_hid_radial_controller_dial_rotate(int16_t x10degree);
+void zmk_hid_radial_controller_clear();
+bool zmk_hid_radial_controller_button_is_pressed();
+#endif // IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLLER)
+
 struct zmk_hid_keyboard_report *zmk_hid_get_keyboard_report(void);
 struct zmk_hid_consumer_report *zmk_hid_get_consumer_report(void);
 
@@ -314,3 +371,7 @@ zmk_hid_boot_report_t *zmk_hid_get_boot_report();
 #if IS_ENABLED(CONFIG_ZMK_MOUSE)
 struct zmk_hid_mouse_report *zmk_hid_get_mouse_report();
 #endif // IS_ENABLED(CONFIG_ZMK_MOUSE)
+
+#if IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLLER)
+struct zmk_hid_radial_controller_report *zmk_hid_get_radial_controller_report();
+#endif // IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLLER)
diff --git a/app/include/zmk/hog.h b/app/include/zmk/hog.h
index eb6e653..6de8f60 100644
--- a/app/include/zmk/hog.h
+++ b/app/include/zmk/hog.h
@@ -15,3 +15,7 @@ int zmk_hog_send_consumer_report(struct zmk_hid_consumer_report_body *body);
 #if IS_ENABLED(CONFIG_ZMK_MOUSE)
 int zmk_hog_send_mouse_report(struct zmk_hid_mouse_report_body *body);
 #endif // IS_ENABLED(CONFIG_ZMK_MOUSE)
+
+#if IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLLER)
+int zmk_hog_send_radial_controller_report(struct zmk_hid_radial_controller_report_body *body);
+#endif // IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLLER)
diff --git a/app/include/zmk/usb_hid.h b/app/include/zmk/usb_hid.h
index c0cbc08..48514d9 100644
--- a/app/include/zmk/usb_hid.h
+++ b/app/include/zmk/usb_hid.h
@@ -13,4 +13,7 @@ int zmk_usb_hid_send_consumer_report(void);
 #if IS_ENABLED(CONFIG_ZMK_MOUSE)
 int zmk_usb_hid_send_mouse_report(void);
 #endif // IS_ENABLED(CONFIG_ZMK_MOUSE)
+#if IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLLER)
+int zmk_usb_hid_send_radial_controller_report(void);
+#endif // IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLLER)
 void zmk_usb_hid_set_protocol(uint8_t protocol);
diff --git a/app/src/endpoints.c b/app/src/endpoints.c
index b17a664..468d66a 100644
--- a/app/src/endpoints.c
+++ b/app/src/endpoints.c
@@ -237,6 +237,37 @@ int zmk_endpoints_send_mouse_report() {
 }
 #endif // IS_ENABLED(CONFIG_ZMK_MOUSE)
 
+#if IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLLER)
+int zmk_endpoints_send_radial_controller_report() {
+    switch (current_instance.transport) {
+#if IS_ENABLED(CONFIG_ZMK_USB)
+    case ZMK_TRANSPORT_USB: {
+        int err = zmk_usb_hid_send_radial_controller_report();
+        if (err) {
+            LOG_ERR("FAILED TO SEND OVER USB: %d", err);
+        }
+        return err;
+    }
+#endif /* IS_ENABLED(CONFIG_ZMK_USB) */
+
+#if IS_ENABLED(CONFIG_ZMK_BLE)
+    case ZMK_TRANSPORT_BLE: {
+        struct zmk_hid_radial_controller_report *radial_controller_report =
+            zmk_hid_get_radial_controller_report();
+        int err = zmk_hog_send_radial_controller_report(&radial_controller_report->body);
+        if (err) {
+            LOG_ERR("FAILED TO SEND OVER HOG: %d", err);
+        }
+        return err;
+    }
+#endif /* IS_ENABLED(CONFIG_ZMK_BLE) */
+    }
+
+    LOG_ERR("Unsupported endpoint transport %d", current_instance.transport);
+    return -ENOTSUP;
+}
+#endif // IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLLER)
+
 #if IS_ENABLED(CONFIG_SETTINGS)
 
 static int endpoints_handle_set(const char *name, size_t len, settings_read_cb read_cb,
@@ -335,9 +366,15 @@ void zmk_endpoints_clear_current(void) {
 #if IS_ENABLED(CONFIG_ZMK_MOUSE)
     zmk_hid_mouse_clear();
 #endif // IS_ENABLED(CONFIG_ZMK_MOUSE)
+#if IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLLER)
+    zmk_hid_radial_controller_clear();
+#endif // IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLER)
 
     zmk_endpoints_send_report(HID_USAGE_KEY);
     zmk_endpoints_send_report(HID_USAGE_CONSUMER);
+#if IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLLER)
+    zmk_endpoints_send_radial_controller_report();
+#endif // IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLER)
 }
 
 static void update_current_endpoint(void) {
diff --git a/app/src/hid.c b/app/src/hid.c
index df0715e..0c9be89 100644
--- a/app/src/hid.c
+++ b/app/src/hid.c
@@ -32,6 +32,13 @@ static struct zmk_hid_mouse_report mouse_report = {.report_id = ZMK_HID_REPORT_I
 
 #endif // IS_ENABLED(CONFIG_ZMK_MOUSE)
 
+#if IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLLER)
+
+static struct zmk_hid_radial_controller_report radial_controller_report = {
+    .report_id = ZMK_HID_REPORT_ID_RADIAL_CONTROLLER, .body = {.button = false, .dial = 0}};
+
+#endif // IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLLER)
+
 // Keep track of how often a modifier was pressed.
 // Only release the modifier if the count is 0.
 static int explicit_modifier_counts[8] = {0, 0, 0, 0, 0, 0, 0, 0};
@@ -435,6 +442,39 @@ void zmk_hid_mouse_clear(void) { memset(&mouse_report.body, 0, sizeof(mouse_repo
 
 #endif // IS_ENABLED(CONFIG_ZMK_MOUSE)
 
+#if IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLLER)
+
+int zmk_hid_radial_controller_button_press() {
+    radial_controller_report.body.button = true;
+    radial_controller_report.body.dial = 0;
+    return 0;
+}
+
+int zmk_hid_radial_controller_button_release() {
+    radial_controller_report.body.button = false;
+    radial_controller_report.body.dial = 0;
+    return 0;
+}
+
+int zmk_hid_radial_controller_dial_rotate(int16_t x10degree) {
+    int16_t value = x10degree;
+    if (x10degree > 3600)
+        value = 3600;
+    if (x10degree < -3600)
+        value = -3600;
+    radial_controller_report.body.dial = value;
+    return 0;
+}
+
+void zmk_hid_radial_controller_clear() {
+    radial_controller_report.body.button = false;
+    radial_controller_report.body.dial = 0;
+}
+
+bool zmk_hid_radial_controller_button_is_pressed() { return radial_controller_report.body.button; }
+
+#endif // IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLLER)
+
 struct zmk_hid_keyboard_report *zmk_hid_get_keyboard_report(void) { return &keyboard_report; }
 
 struct zmk_hid_consumer_report *zmk_hid_get_consumer_report(void) { return &consumer_report; }
@@ -444,3 +484,11 @@ struct zmk_hid_consumer_report *zmk_hid_get_consumer_report(void) { return &cons
 struct zmk_hid_mouse_report *zmk_hid_get_mouse_report(void) { return &mouse_report; }
 
 #endif // IS_ENABLED(CONFIG_ZMK_MOUSE)
+
+#if IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLLER)
+
+struct zmk_hid_radial_controller_report *zmk_hid_get_radial_controller_report() {
+    return &radial_controller_report;
+}
+
+#endif // IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLLER)
diff --git a/app/src/hog.c b/app/src/hog.c
index 82fafc2..1a251c1 100644
--- a/app/src/hog.c
+++ b/app/src/hog.c
@@ -78,6 +78,15 @@ static struct hids_report mouse_input = {
 
 #endif // IS_ENABLED(CONFIG_ZMK_MOUSE)
 
+#if IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLLER)
+
+static struct hids_report radial_controller_input = {
+    .id = ZMK_HID_REPORT_ID_RADIAL_CONTROLLER,
+    .type = HIDS_INPUT,
+};
+
+#endif // IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLLER)
+
 static bool host_requests_notification = false;
 static uint8_t ctrl_point;
 // static uint8_t proto_mode;
@@ -152,6 +161,17 @@ static ssize_t read_hids_mouse_input_report(struct bt_conn *conn, const struct b
 }
 #endif // IS_ENABLED(CONFIG_ZMK_MOUSE)
 
+#if IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLLER)
+static ssize_t read_hids_radial_controller_input_report(struct bt_conn *conn,
+                                                        const struct bt_gatt_attr *attr, void *buf,
+                                                        uint16_t len, uint16_t offset) {
+    struct zmk_hid_radial_controller_report_body *report_body =
+        &zmk_hid_get_radial_controller_report()->body;
+    return bt_gatt_attr_read(conn, attr, buf, len, offset, report_body,
+                             sizeof(struct zmk_hid_radial_controller_report_body));
+}
+#endif // IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLLER)
+
 // static ssize_t write_proto_mode(struct bt_conn *conn,
 //                                 const struct bt_gatt_attr *attr,
 //                                 const void *buf, uint16_t len, uint16_t offset,
@@ -208,6 +228,15 @@ BT_GATT_SERVICE_DEFINE(
                        NULL, &mouse_input),
 #endif // IS_ENABLED(CONFIG_ZMK_MOUSE)
 
+#if IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLLER)
+    BT_GATT_CHARACTERISTIC(BT_UUID_HIDS_REPORT, BT_GATT_CHRC_READ | BT_GATT_CHRC_NOTIFY,
+                           BT_GATT_PERM_READ_ENCRYPT, read_hids_radial_controller_input_report,
+                           NULL, NULL),
+    BT_GATT_CCC(input_ccc_changed, BT_GATT_PERM_READ_ENCRYPT | BT_GATT_PERM_WRITE_ENCRYPT),
+    BT_GATT_DESCRIPTOR(BT_UUID_HIDS_REPORT_REF, BT_GATT_PERM_READ_ENCRYPT, read_hids_report_ref,
+                       NULL, &radial_controller_input),
+#endif // IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLLER)
+
 #if IS_ENABLED(CONFIG_ZMK_HID_INDICATORS)
     BT_GATT_CHARACTERISTIC(BT_UUID_HIDS_REPORT,
                            BT_GATT_CHRC_READ | BT_GATT_CHRC_WRITE | BT_GATT_CHRC_WRITE_WITHOUT_RESP,
@@ -383,6 +412,59 @@ int zmk_hog_send_mouse_report(struct zmk_hid_mouse_report_body *report) {
 
 #endif // IS_ENABLED(CONFIG_ZMK_MOUSE)
 
+#if IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLLER)
+
+K_MSGQ_DEFINE(zmk_hog_radial_controller_msgq, sizeof(struct zmk_hid_radial_controller_report_body),
+              CONFIG_ZMK_BLE_RADIAL_CONTROLLER_REPORT_QUEUE_SIZE, 2);
+
+#define RADIAL_CONTROLLER_HOG_SVC_ATTR_INDEX COND_CODE_1(IS_ENABLED(CONFIG_ZMK_MOUSE), (17), (13))
+
+void send_radial_controller_report_callback(struct k_work *work) {
+    struct zmk_hid_radial_controller_report_body report;
+    while (k_msgq_get(&zmk_hog_radial_controller_msgq, &report, K_NO_WAIT) == 0) {
+        struct bt_conn *conn = zmk_ble_active_profile_conn();
+        if (conn == NULL) {
+            return;
+        }
+        struct bt_gatt_notify_params notify_params = {
+            .attr = &hog_svc.attrs[RADIAL_CONTROLLER_HOG_SVC_ATTR_INDEX],
+            .data = &report,
+            .len = sizeof(report),
+        };
+        int err = bt_gatt_notify_cb(conn, &notify_params);
+        if (err == -EPERM) {
+            bt_conn_set_security(conn, BT_SECURITY_L2);
+        } else if (err) {
+            LOG_DBG("Error notifying %d", err);
+        }
+
+        bt_conn_unref(conn);
+    }
+};
+
+K_WORK_DEFINE(hog_radial_controller_work, send_radial_controller_report_callback);
+int zmk_hog_send_radial_controller_report(struct zmk_hid_radial_controller_report_body *report) {
+    int err = k_msgq_put(&zmk_hog_radial_controller_msgq, report, K_MSEC(100));
+    if (err) {
+        switch (err) {
+        case -EAGAIN: {
+            LOG_WRN(
+                "Radial controller message queue full, popping first message and queueing again");
+            struct zmk_hid_radial_controller_report_body discarded_report;
+            k_msgq_get(&zmk_hog_radial_controller_msgq, &discarded_report, K_NO_WAIT);
+            return zmk_hog_send_radial_controller_report(report);
+        }
+        default:
+            LOG_WRN("Failed to queue radial controller report to send (%d)", err);
+            return err;
+        }
+    }
+    k_work_submit_to_queue(&hog_work_q, &hog_radial_controller_work);
+    return 0;
+};
+
+#endif // IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLLER)
+
 static int zmk_hog_init(void) {
     static const struct k_work_queue_config queue_config = {.name = "HID Over GATT Send Work"};
     k_work_queue_start(&hog_work_q, hog_q_stack, K_THREAD_STACK_SIZEOF(hog_q_stack),
diff --git a/app/src/usb_hid.c b/app/src/usb_hid.c
index 9db1095..08bde68 100644
--- a/app/src/usb_hid.c
+++ b/app/src/usb_hid.c
@@ -177,6 +177,19 @@ int zmk_usb_hid_send_mouse_report() {
 }
 #endif // IS_ENABLED(CONFIG_ZMK_MOUSE)
 
+#if IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLLER)
+int zmk_usb_hid_send_radial_controller_report() {
+#if IS_ENABLED(CONFIG_ZMK_USB_BOOT)
+    if (hid_protocol == HID_PROTOCOL_BOOT) {
+        return -ENOTSUP;
+    }
+#endif /* IS_ENABLED(CONFIG_ZMK_USB_BOOT) */
+
+    struct zmk_hid_radial_controller_report *report = zmk_hid_get_radial_controller_report();
+    return zmk_usb_hid_send_report((uint8_t *)report, sizeof(*report));
+}
+#endif // IS_ENABLED(CONFIG_ZMK_RADIAL_CONTROLLER)
+
 static int zmk_usb_hid_init(void) {
     hid_dev = device_get_binding("HID_0");
     if (hid_dev == NULL) {
